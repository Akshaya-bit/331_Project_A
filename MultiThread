package Ecte331;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.imageio.ImageIO;

public class MultiThread {

    public static short[][] readGrayscaleImage(String fileName) {
        short[][] grayImage = null;
        try {
            BufferedImage image = ImageIO.read(new File(fileName));
            int width = image.getWidth();
            int height = image.getHeight();

            byte[] pixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
            grayImage = new short[height][width];

            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    int coord = 3 * (i * width + j);
                    int pr = ((short) pixels[coord] & 0xff); // red
                    int pg = (((short) pixels[coord + 1] & 0xff)); // green
                    int pb = (((short) pixels[coord + 2] & 0xff)); // blue
                    grayImage[i][j] = (short) Math.round(0.299 * pr + 0.587 * pg + 0.114 * pb);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return grayImage;
    }

    public static void main(String[] args) throws IOException {
        String templateFileName = "Template.jpg";
        String sourceFileName = "TenCardG.jpg";

        short[][] templateImage = readGrayscaleImage(templateFileName);
        short[][] sourceImage = readGrayscaleImage(sourceFileName);

        System.out.println("Template Image: " + templateImage.length + "x" + templateImage[0].length);
        System.out.println("Source Image: " + sourceImage.length + "x" + sourceImage[0].length);

        // Multi-threaded template matching
        int numThreads = Runtime.getRuntime().availableProcessors(); // Number of available processors
        System.out.println("Number of threads: " + numThreads);

        List<int[]> results = Collections.synchronizedList(new ArrayList<int[]>()); // Synchronized list to store results

        // Divide source image vertically among threads
        int rowsPerThread = (sourceImage.length - templateImage.length + 1) / numThreads;
        int remainingRows = (sourceImage.length - templateImage.length + 1) % numThreads;
        int startRow = 0;

        for (int i = 0; i < numThreads; i++) {
            int endRow = startRow + rowsPerThread + (i < remainingRows ? 1 : 0);
            if (endRow > sourceImage.length - templateImage.length + 1) {
                endRow = sourceImage.length - templateImage.length + 1;
            }
            Thread workerThread = new TemplateMatchingThread(templateImage, sourceImage, startRow, endRow, results);
            workerThread.start();
            startRow = endRow;
        }

        // Wait for all threads to complete
        while (Thread.activeCount() > 1) {
            try {
                Thread.sleep(100); // Sleep to avoid excessive checking
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        // Apply non-maximum suppression
        List<int[]> filteredResults = nonMaximumSuppression(results, templateImage.length, templateImage[0].length);

        // Example output for demo purposes
        for (int i = 0; i < filteredResults.size(); i++) {
            int[] result = filteredResults.get(i);
            System.out.println("Match found at: (" + result[0] + ", " + result[1] + ")");
        }

        // Draw rectangles on the source image
        drawRectangles(sourceFileName, filteredResults, templateImage.length, templateImage[0].length, "ResultImage.jpg");
    }

    static class TemplateMatchingThread extends Thread {
        private short[][] templateImage;
        private short[][] sourceImage;
        private int startRow;
        private int endRow;
        private List<int[]> results;

        public TemplateMatchingThread(short[][] templateImage, short[][] sourceImage, int startRow, int endRow, List<int[]> results) {
            this.templateImage = templateImage;
            this.sourceImage = sourceImage;
            this.startRow = startRow;
            this.endRow = endRow;
            this.results = results;
        }

        @Override
        public void run() {
            // Perform template matching for the assigned portion of source image
            int r1 = sourceImage.length;
            int c1 = sourceImage[0].length;
            int r2 = templateImage.length;
            int c2 = templateImage[0].length;
            int tempSize = r2 * c2;
            double minimum = Double.MAX_VALUE;
            double ratio = 5; // for tighter calibration

            if (startRow >= endRow || startRow < 0 || endRow < 0) {
                return; // Invalid row range, exit thread
            }

            double[][] absDiffMat = new double[endRow - startRow][c1 - c2 + 1];

            for (int i = startRow; i < endRow; i++) {
                for (int j = 0; j <= c1 - c2; j++) {
                    double absDiff = 0.0;
                    for (int m = 0; m < r2; m++) {
                        for (int n = 0; n < c2; n++) {
                            absDiff += Math.abs(sourceImage[i + m][j + n] - templateImage[m][n]);
                        }
                    }
                    absDiff /= tempSize;
                    absDiffMat[i - startRow][j] = absDiff;
                    if (absDiff < minimum) {
                        minimum = absDiff;
                    }
                }
            }

            double threshold = ratio * minimum;
            int[][] localCoordinates = new int[(endRow - startRow) * (c1 - c2 + 1)][2];
            int coordCount = 0;

            for (int i = 0; i < absDiffMat.length; i++) {
                for (int j = 0; j < absDiffMat[i].length; j++) {
                    if (absDiffMat[i][j] <= threshold) {
                        localCoordinates[coordCount][0] = startRow + i;
                        localCoordinates[coordCount][1] = j;
                        coordCount++;
                    }
                }
            }

            for (int i = 0; i < coordCount; i++) {
                results.add(localCoordinates[i]);
            }
        }
    }

    public static List<int[]> nonMaximumSuppression(List<int[]> coordinates, int rectHeight, int rectWidth) {
        List<int[]> filteredCoordinates = new ArrayList<int[]>();

        // Sort coordinates by their x and y values
        Collections.sort(coordinates, (a, b) -> {
            if (a[0] != b[0]) {
                return Integer.compare(a[0], b[0]);
            } else {
                return Integer.compare(a[1], b[1]);
            }
        });

        // Apply non-maximum suppression
        for (int i = 0; i < coordinates.size(); i++) {
            int[] current = coordinates.get(i);
            boolean keep = true;
            for (int j = 0; j < filteredCoordinates.size(); j++) {
                int[] existing = filteredCoordinates.get(j);
                if (Math.abs(current[0] - existing[0]) < rectHeight && Math.abs(current[1] - existing[1]) < rectWidth) {
                    keep = false;
                    break;
                }
            }
            if (keep) {
                filteredCoordinates.add(current);
            }
        }

        return filteredCoordinates;
    }

    public static void drawRectangles(String sourceFileName, List<int[]> coordinates, int rectHeight, int rectWidth, String outputFileName) {
        try {
            File input = new File(sourceFileName);
            BufferedImage sourceImage = ImageIO.read(input);

            Graphics2D g2D = sourceImage.createGraphics();
            g2D.setColor(Color.RED);

            for (int[] coord : coordinates) {
                g2D.drawRect(coord[1], coord[0], rectWidth, rectHeight);
            }

            g2D.dispose();

            File output = new File(outputFileName);
            ImageIO.write(sourceImage, "jpg", output);

            System.out.println("Output image saved to: " + output.getAbsolutePath());

            // Open the saved image using the default system viewer
            Desktop desktop = Desktop.getDesktop();
            if (output.exists()) {
                desktop.open(output);
            } else {
                System.out.println("File not found: " + output.getAbsolutePath());
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
